---
- name: set distro-specific variables
  include_vars: '{{ item }}'
  with_first_found:
    - '{{ ansible_os_family }}.yml'
    - default.yml

- name: install go-repo gpg key
  rpm_key:
    state: present
    key: https://mirror.go-repo.io/centos/RPM-GPG-KEY-GO-REPO

- name: install go-repo
  yum_repository:
    name: go-repo
    description: go-repo - CentOS
    baseurl: https://mirror.go-repo.io/centos/$releasever/$basearch/
    gpgcheck: yes
    enabled: yes
  when:
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")

- name: install dependencies
  package: name={{ item }}
  with_items:
    - python-httplib2
    - git
    - golang
    - jq
    - wget
    - nc
  when:
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")

- name: check if go-carbon is already installed and get it's version
  shell: PATH=$PATH:/usr/local/bin; go-carbon --version
  register: go_carbon_installed_version
  failed_when: no
  changed_when: go_carbon_installed_version.rc != 0

- name: Get list of releases
  uri:
    url: https://api.github.com/repos/lomik/go-carbon/releases
    return_content: yes
  register: releases

- name: Get latest release or prerelease
  set_fact:
    go_carbon_release_json: "{{ item }}"
  with_items: "{{ releases.json }}"
  when:
    - "{{ ( go_carbon_release_json is not defined ) and ( true if go_carbon_pre_release else not item.prerelease ) }}"

- name: Get package url
  set_fact:
    go_carbon_package_json: "{{ item }}"
  with_items: "{{ go_carbon_release_json.assets }}"
  register: go-carbon_package_download
  when:
    - "'{{ package_extension }}' in item.name"

- name: Decide if installation required
  set_fact:
    go_carbon_should_install: "{{ true if go_carbon_installed_version.changed else go_carbon_installed_version.stdout | version_compare(go_carbon_release_json.tag_name|regex_replace('^v',''), '!=') if go_carbon_latest else false }}"

- name: Show latest version, installed version if any and url
  debug: msg="latest{{':'}} '{{ go_carbon_release_json.tag_name }}'
              {{ '' if go_carbon_installed_version.changed else ', Installed version' + ':' + \" '\" + go_carbon_installed_version.stdout + \"'\" }}
              , {{ package_extension }}{{':'}} {{ go_carbon_package_json.browser_download_url }}
              , installation required{{':'}} {{ go_carbon_should_install }} "
  when:
    - "{{ go_carbon_installed_version.changed or go_carbon_latest }}"

- name: Download go-carbon package
  get_url: url={{ go_carbon_package_json.browser_download_url }} dest=/tmp/{{ go_carbon_package_json.name }}
  when:
    - go_carbon_should_install
    - package_extension != 'src'

- name: install go-carbon deb
  apt: deb=/tmp/{{ go_carbon_package_json.name }} force={{ false if go_carbon_installed_version.changed else go_carbon_installed_version.stdout | version_compare(go_carbon_release_json.tag_name|regex_replace('^v',''), '>') }}
  when:
    - go_carbon_should_install
    - package_extension != 'src'
    - (ansible_distribution == "Ubuntu") or (ansible_distribution == "Debian")
  
- name: install go-carbon rpm
  yum: name=/tmp/{{ go_carbon_package_json.name }}
  when:
    - go_carbon_should_install
    - package_extension != 'src'
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")
    - ansible_distribution_major_version == "6"

- name: install go-carbon from source
  command: "GOPATH=/tmp go get github.com/lomik/go-carbon && GOPATH=/tmp go build github.com/lomik/go-carbon && mv /tmp/go-carbon /usr/local/bin/"
  args:
    creates: /usr/local/bin/go-carbon
  when:
    - go_carbon_should_install
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")
    - ansible_distribution_major_version == "7"
    - package_extension == 'src'
  
- name: remove go-carbon package
  file: dest=/tmp/{{ go_carbon_package_json.name }} state=absent
  when:
    - go_carbon_package_json is defined

- name: create required files and folders
  file: path={{ item.dst }} state={{ item.state }}
  with_items:
    - { dst: /etc/go-carbon/, state: directory }
    - { dst: /var/log/go-carbon/, state: directory }

- name: deploy carbon configs
  template: dest=/etc/go-carbon/{{ item }} src={{ item }}.j2
  with_items:
    - storage-schemas.conf
    - storage-aggregation.conf
  notify:
    - restart go-carbon

- name: deploy go-carbon configs
  template: dest=/usr/local/etc/{{ item }} src={{ item }}.j2
  with_items:
    - go-carbon.conf
  notify:
    - restart go-carbon
  when:     
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")

- name: set percentage of RAM left unwritten to disk
  sysctl:
    name: vm.dirty_ratio
    value: 80
    sysctl_set: yes
    state: present
    reload: yes

- name: set percentage of RAM when background writer inits
  sysctl:
    name: vm.dirty_background_ratio
    value: 50
    sysctl_set: yes
    state: present
    reload: yes

- name: allow page to be left dirty for no longer than 10m
  sysctl:
    name: vm.dirty_expire_centisecs
    value: 60000
    sysctl_set: yes
    state: present
    reload: yes

- name: deploy systemd service unit file
  template: dest=/etc/systemd/system/{{ item }} src={{ item }}.j2
  with_items:
    - go-carbon.service
  notify:
    - restart go-carbon
  when:     
    - (ansible_distribution == "CentOS") or (ansible_distribution == "RedHat")
    - ansible_distribution_major_version == "7"

- name: enable and start go-carbon
  service: name=go-carbon enabled=yes state=started
